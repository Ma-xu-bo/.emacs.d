* interfacs tweaks
#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC

#+RESULTS:
: revert-buffer

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

#+RESULTS:
: t

* Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

#+RESULTS:
: t

* Counsel&Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
  :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+END_SRC

#+RESULTS:
: t

* Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

#+RESULTS:
: avy-goto-char

* Auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)))
#+END_SRC
* Color-theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-modern
    :ensure t)

  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))

  (load-theme 'leuven t)
#+END_SRC

#+RESULTS:
: t
* Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdeliver.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

#+RESULTS:
* Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t)
#+END_SRC

#+RESULTS:
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
#+END_SRC

#+RESULTS:
* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC

#+RESULTS:
: t
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

#+RESULTS:
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

#+RESULTS:
* Misc packages
#+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))
    ;;(setq beacon-color "#666600")

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode t))

  (setq save-interprogram-paste-before-kill t)

  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC

#+RESULTS:
: revert-buffer
* iedit and narrow / widen dwim
#+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)
    (defun narrow-or-widen-dwim (p)
	"Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
	(interactive "P")
	(declare (interactive-only))
	(cond ((and (buffer-narrowed-p) (not p)) (widen))
	      ((region-active-p)
	       (narrow-to-region (region-beginning)
				 (region-end)))
	      ((derived-mode-p 'org-mode)
	       ;; `org-edit-src-code' is not a real narrowing
	       ;; command. Remove this first conditional if
	       ;; you don't want it.
	       (cond ((ignore-errors (org-edit-src-code) t)
		      (delete-other-windows))
		     ((ignore-errors (org-narrow-to-block) t))
		     (t (org-narrow-to-subtree))))
	      (t (narrow-to-defun))))

    (define-key ctl-x-map  "n"
	#'narrow-or-widen-dwim)

#+END_SRC

#+RESULTS:
: narrow-or-widen-dwim

* Load other files
#+BEGIN_SRC emacs-lisp
  (defun load-if-exists (f)
    " "
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "~/Dropbox/shared/mu4econfig.el")
  (load-if-exists "~/Dropbox/shared/tempstuff.el")
  (load-if-exists "~/Dropbox/shared/not-for-github.el")
#+END_SRC

#+RESULTS:

